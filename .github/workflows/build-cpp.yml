name: C++ Build & Test

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type to run"
        required: false
        default: "both"
        type: choice
        options:
          - "both"
          - "Debug"
          - "Release"
      os:
        description: "Operating system to run on"
        required: false
        default: "both"
        type: choice
        options:
          - "both"
          - "windows-latest"
          - "ubuntu-latest"

jobs:
  build-and-test:
    name: Build and Test C++ on ${{ matrix.os }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_type: Debug
          - os: windows-latest
            build_type: Release
          - os: ubuntu-latest
            build_type: Debug
          - os: ubuntu-latest
            build_type: Release

    steps:
      - name: Check if job should run
        id: should-run
        run: |
          should_run="true"

          # Check OS filter
          if [[ "${{ github.event.inputs.os }}" != "both" && "${{ github.event.inputs.os }}" != "" && "${{ github.event.inputs.os }}" != "${{ matrix.os }}" ]]; then
            should_run="false"
          fi

          # Check build type filter
          if [[ "${{ github.event.inputs.build_type }}" != "both" && "${{ github.event.inputs.build_type }}" != "" && "${{ github.event.inputs.build_type }}" != "${{ matrix.build_type }}" ]]; then
            should_run="false"
          fi

          echo "should_run=$should_run" >> $GITHUB_OUTPUT
          echo "Job should run: $should_run (OS: ${{ matrix.os }}, Build: ${{ matrix.build_type }})"
        shell: bash

      - name: Checkout repository
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/checkout@v4

      # --- OS Specific Setup ---
      - name: Setup Developer Command Prompt
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build essentials
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential ninja-build tree
        shell: bash

      - name: Set up CMake
        if: steps.should-run.outputs.should_run == 'true'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.20.0"

      # --- Doxygen/Graphviz Installation ---
      - name: Install Doxygen and Graphviz
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux' && matrix.build_type == 'Release'
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz
        shell: bash

      # --- ccache Setup ---
      - name: Install ccache
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        run: choco install ccache --no-progress -y
        shell: pwsh

      - name: Install ccache
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        run: sudo apt-get install -y ccache
        shell: bash

      - name: Cache ccache directory
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/cache@v4
        id: ccache-cache
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('cpp/**/*.cpp', 'cpp/**/*.h', 'cpp/**/*.hpp') }}-v1
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.build_type }}-v1
            ccache-${{ runner.os }}-v1

      - name: Configure ccache settings
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/.ccache"
          ccache --set-config=cache_dir="${{ github.workspace }}/.ccache"
          ccache --set-config=max_size=2G
          ccache -z
        shell: pwsh

      - name: Configure ccache settings
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        run: |
          mkdir -p "${{ github.workspace }}/.ccache"
          ccache --set-config=cache_dir="${{ github.workspace }}/.ccache"
          ccache --set-config=max_size=2G
          ccache -z
        shell: bash

      # --- FetchContent Cache ---
      - name: Cache FetchContent dependencies
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/cache@v4
        id: fetchcontent-cache
        with:
          path: ${{ github.workspace }}/cpp/build/_deps
          key: fetchcontent-${{ runner.os }}-${{ hashFiles('cpp/CMakeLists.txt', 'cpp/cmake/CMakeLists.txt') }}-v1
          restore-keys: |
            fetchcontent-${{ runner.os }}-v1

      # --- Build Steps ---
      - name: Configure CMake
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          if ("${{ matrix.build_type }}" -eq "Release") {
            Write-Host "Installing Doxygen and Graphviz for Windows Release..."
            choco install doxygen.install graphviz --no-progress -y
            $env:Path = "C:\Program Files\Doxygen\bin;" + $env:Path
            $env:Path = "C:\Program Files\Graphviz\bin;" + $env:Path
            $env:Path = "C:\ProgramData\chocolatey\lib\doxygen.install\tools\doxygen\bin;" + $env:Path
            $env:Path = "C:\ProgramData\chocolatey\lib\graphviz\tools\bin;" + $env:Path
            echo "C:\Program Files\Doxygen\bin" >> $env:GITHUB_PATH
            echo "C:\Program Files\Graphviz\bin" >> $env:GITHUB_PATH
            echo "C:\ProgramData\chocolatey\lib\doxygen.install\tools\doxygen\bin" >> $env:GITHUB_PATH
            echo "C:\ProgramData\chocolatey\lib\graphviz\tools\bin" >> $env:GITHUB_PATH
          }

          $cmakeArgs = @(
            "-B", "${{ github.workspace }}/cpp/build",
            "-S", "${{ github.workspace }}",
            "-G", "Ninja",
            "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}",
            "-DCMAKE_CXX_STANDARD=20",
            "-DCMAKE_C_COMPILER_LAUNCHER=ccache",
            "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache",
            "-DVISTA_SDK_CPP_BUILD_TESTS=ON",
            "-DVISTA_SDK_CPP_COPY_RESOURCES=ON",
            "-DVISTA_SDK_CPP_BUILD_SAMPLES=OFF"
          )

          if ("${{ matrix.build_type }}" -eq "Debug") {
            $cmakeArgs += "-DCI_FORCE_DEBUG_SPDLOG_WARN=ON"
            $cmakeArgs += "-DVISTA_SDK_CPP_BUILD_DOCUMENTATION=OFF"
          }
          elseif ("${{ matrix.build_type }}" -eq "Release") {
            $cmakeArgs += "-DVISTA_SDK_CPP_BUILD_DOCUMENTATION=ON"
          }

          Write-Host "CMake arguments: $($cmakeArgs -join ' ')"
          cmake $cmakeArgs

      - name: Configure CMake
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        run: |
          CMAKE_ARGS=(
            "-B" "${{ github.workspace }}/cpp/build"
            "-S" "${{ github.workspace }}"
            "-G" "Ninja"
            "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}"
            "-DCMAKE_CXX_STANDARD=20"
            "-DCMAKE_C_COMPILER_LAUNCHER=ccache"
            "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
            "-DVISTA_SDK_CPP_BUILD_TESTS=ON"
            "-DVISTA_SDK_CPP_COPY_RESOURCES=ON"
            "-DVISTA_SDK_CPP_BUILD_SAMPLES=OFF"
          )
          if [ "${{ matrix.build_type }}" = "Debug" ]; then
            CMAKE_ARGS+=("-DCI_FORCE_DEBUG_SPDLOG_WARN=ON" "-DVISTA_SDK_CPP_BUILD_DOCUMENTATION=OFF")
          fi
          if [ "${{ matrix.build_type }}" = "Release" ]; then
            CMAKE_ARGS+=("-DVISTA_SDK_CPP_BUILD_DOCUMENTATION=ON")
          fi
          echo "CMake arguments: ${CMAKE_ARGS[@]}"
          cmake "${CMAKE_ARGS[@]}"
        shell: bash

      - name: Build
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake --build ${{ github.workspace }}/cpp/build --config ${{ matrix.build_type }} --parallel

      - name: Build
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          cmake --build ${{ github.workspace }}/cpp/build --config ${{ matrix.build_type }} --parallel

      - name: Show ccache statistics after build
        if: steps.should-run.outputs.should_run == 'true'
        shell: bash
        run: ccache -s

      # --- Test Step ---
      - name: Run Tests
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Windows'
        continue-on-error: true
        working-directory: ${{ github.workspace }}/cpp/build
        shell: pwsh
        run: |
          if ("${{ matrix.build_type }}" -eq "Debug") {
              Write-Host "--------------------------------------------------------------------------------"
              Write-Host "INFO: Running tests in DEBUG mode with spdlog level set to WARN."
              Write-Host "Any warnings or errors displayed below may be from internal library logging"
              Write-Host "for diagnostic purposes. This can also highlight potentially ill-formed"
              Write-Host "values in JSON resources, or demonstrate correct error handling within"
              Write-Host "test cases when expected issues are encountered. These messages do not"
              Write-Host "necessarily reflect test case failures. Check CTest summary for actual"
              Write-Host "test pass/fail status."
              Write-Host "--------------------------------------------------------------------------------"
              ctest -C ${{ matrix.build_type }} --output-on-failure -VV
          } else {
              ctest -C ${{ matrix.build_type }} --output-on-failure
          }
          if ($LASTEXITCODE -ne 0) {
              Write-Warning "CTest reported test failures. See output above for details."
          }

      - name: Run Tests
        if: steps.should-run.outputs.should_run == 'true' && runner.os == 'Linux'
        continue-on-error: true
        working-directory: ${{ github.workspace }}/cpp/build
        shell: bash
        run: |
          if [ "${{ matrix.build_type }}" = "Debug" ]; then
              echo "--------------------------------------------------------------------------------"
              echo "INFO: Running tests in DEBUG mode with spdlog level set to WARN."
              echo "Any warnings or errors displayed below may be from internal library logging"
              echo "for diagnostic purposes. This can also highlight potentially ill-formed"
              echo "values in JSON resources, or demonstrate correct error handling within"
              echo "test cases when expected issues are encountered. These messages do not"
              echo "necessarily reflect test case failures. Check CTest summary for actual"
              echo "test pass/fail status."
              echo "--------------------------------------------------------------------------------"
              ctest -C ${{ matrix.build_type }} --output-on-failure -VV
          else
              ctest -C ${{ matrix.build_type }} --output-on-failure
          fi
          if [ $? -ne 0 ]; then
              echo "::warning::CTest reported test failures. See output above for details."
          fi

      # --- Doxygen Documentation Generation ---
      - name: Generate Doxygen Documentation
        if: steps.should-run.outputs.should_run == 'true' && matrix.build_type == 'Release'
        working-directory: ${{ github.workspace }}/cpp/build
        shell: bash
        run: |
          echo "Generating Doxygen documentation..."
          cmake --build . --target documentation --config ${{ matrix.build_type }}
          echo "Doxygen documentation generation complete."
          if [ -d "bin/${{ matrix.build_type }}/doc" ]; then
            echo "Documentation output directory bin/${{ matrix.build_type }}/doc found."
          else
            echo "WARNING: Documentation output directory not found: bin/${{ matrix.build_type }}/doc"
          fi

      # --- Upload Artifacts ---
      - name: Upload Bin Directory Artifacts
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cpp-bin-artifacts-${{ runner.os }}-${{ matrix.build_type }}
          path: ${{ github.workspace }}/cpp/build/bin/
          if-no-files-found: warn
